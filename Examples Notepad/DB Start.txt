DB Migration & injection:

1. Data model + models example:

	Course				Enrollment				Student

	CourseId			EnrollmentId				ID
	Title				CourseID				LastName
	Credits				StudentID				FirstMidName
					Grade					EnrollmentDate

	Navigation Properties		Navigation Properties			Navigation Properties
	Enrollments			Course					Enrollments
					Student


	using System.ComponentModel.DataAnnotations.Schema;

	namespace ContosoUniversity.Models
	{
		public class Course
		{
			[DatabaseGenerated(DatabaseGeneratedOption.None)]
			public int CourseID { get; set; }
			public string Title { get; set; }
			public int Credits { get; set; }

			public ICollection<Enrollment>? Enrollments { get; set; }
		}
	}

	namespace ContosoUniversity.Models
	{
		public enum Grade
		{
			A, B, C, D, F
		}

		public class Enrollment
		{
			public int EnrollmentID { get; set; }
			public int CourseID { get; set; }
			public int StudentID { get; set; }
			public Grade? Grade { get; set; }

			public Course? Course { get; set; }
			public Student? Student { get; set; }
		}
	}


	namespace ContosoUniversity.Models
	{
		public class Student
		{
			public int ID { get; set; }
			public string LastName { get; set; }
			public string FirstMidName { get; set; }
			public DateTime EnrollmentDate { get; set; }

			public ICollection<Enrollment>? Enrollments { get; set; }
		}
	}


2. Context file:

	Data Folder -> SchoolContext.cs

	using ContosoUniversity.Models;
	using Microsoft.EntityFrameworkCore;

	namespace ContosoUniversity.Data
	{
    		public class SchoolContext : DbContext
    		{
        		public SchoolContext(DbContextOptions<SchoolContext> options) : base(options)
        		{
        		}

        		public DbSet<Course> Courses { get; set; }
        		public DbSet<Enrollment> Enrollments { get; set; }
        		public DbSet<Student> Students { get; set; }

        		protected override void OnModelCreating(ModelBuilder modelBuilder)
        		{
            			modelBuilder.Entity<Course>().ToTable("Course");
            			modelBuilder.Entity<Enrollment>().ToTable("Enrollment");
            			modelBuilder.Entity<Student>().ToTable("Student");
        		}
    		}
	}

3. Register Context file as a service:

	Program.cs ->
	(Below var connectionString)
	builder.Services.AddDbContext<SchoolContext>(options =>
    		options.UseSqlServer(connectionString));

4. Test Data:

	Data folder -> DbInitializer.cs

	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Microsoft.EntityFrameworkCore;
	using Microsoft.Extensions.DependencyInjection;
	using ContosoUniversity.Models;

	namespace ContosoUniversity.Data
	{
    		public static class DbInitializer
    		{
        		public static void Initialize(SchoolContext context)
        		{
            			context.Database.EnsureCreated();

            			// Look for any students.
            			if (context.Students.Any())
            			{
                			return;   // DB has been seeded
            			}

            			var students = new Student[]
            			{
            				new Student{FirstMidName="Carson",LastName="Alexander",EnrollmentDate=DateTime.Parse("2019-09-01")},
            				new Student{FirstMidName="Meredith",LastName="Alonso",EnrollmentDate=DateTime.Parse("2019-09-01")},
            				new Student{FirstMidName="Arturo",LastName="Anand",EnrollmentDate=DateTime.Parse("2018-09-01")},
            			};
            			foreach (Student s in students)
            			{
                			context.Students.Add(s);
            			}
            			context.SaveChanges();

            			var courses = new Course[]
            			{
            				new Course{CourseID=1050,Title="Chemistry",Credits=3,},
            				new Course{CourseID=4022,Title="Microeconomics",Credits=3,},
            				new Course{CourseID=4041,Title="Macroeconomics",Credits=3,},
            			};
            			foreach (Course c in courses)
            			{
                			context.Courses.Add(c);
            			}
            			context.SaveChanges();

            			var enrollments = new Enrollment[]
            			{
            				new Enrollment{StudentID=1,CourseID=1050,Grade=Grade.A},
            				new Enrollment{StudentID=1,CourseID=4022,Grade=Grade.C},
            				new Enrollment{StudentID=1,CourseID=4041,Grade=Grade.B},
            			};
            			foreach (Enrollment e in enrollments)
            			{
                			context.Enrollments.Add(e);
            			}
            			context.SaveChanges();

        		}
    		}
	}

5. Dependency Injection:

(Just above app.run())

	using (var scope = app.Services.CreateScope())
	{
    		var schoolContext = scope.ServiceProvider.GetRequiredService<SchoolContext>();
    		DbInitializer.Initialize(schoolContext);
	}
